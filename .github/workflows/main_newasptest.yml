name: Build and Deploy ASP.NET App to Azure Web App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Job 1: Budowanie aplikacji ASP.NET
  build:
    runs-on: windows-latest
    steps:
      # Sprawdzamy kod z repozytorium
      - name: Checkout code
        uses: actions/checkout@v4

      # Ustawienie MSBuild do budowania aplikacji
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.0.2

      # Ustawienie NuGet do przywracania paczek
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5

      # Przywracamy paczki NuGet
      - name: Restore NuGet packages
        run: nuget restore asptest.sln

      # Budujemy aplikację
      - name: Build the app
        run: msbuild /nologo /verbosity:m /t:Build /p:Configuration=Release asptest.sln

      # Tworzymy folder 'published', jeśli nie istnieje
      - name: Create 'published' folder
        run: |
          if (!(Test-Path "D:/a/asptest/asptest/published")) {
            New-Item -ItemType Directory -Path "D:/a/asptest/asptest/published"
          }

      # Publikujemy aplikację do folderu 'published'
      - name: Publish the app
        run: msbuild /nologo /verbosity:m /t:Publish /p:Configuration=Release /p:PublishDir="D:/a/asptest/asptest/published" asptest.sln

      # Wyświetlamy zawartość folderu 'published' w celu weryfikacji
      - name: List files in the 'published' folder
        run: dir "D:/a/asptest/asptest/published" || echo "No files found in 'published'"

      # Przesyłamy artefakty (plik opublikowanej aplikacji) do następnego zadania
      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: ASP-app
          path: "D:/a/asptest/asptest/published/**"  # Prawidłowa ścieżka z ukośnikami

  # Job 2: Wdrażanie aplikacji na Azure
  deploy:
    runs-on: windows-latest
    needs: build  # To zadanie zależy od zadania 'build'
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write  # To wymagane do uzyskania tokena JWT

    steps:
      # Pobieramy artefakt z poprzedniego zadania
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: ASP-app
          path: "D:/a/asptest/asptest/published"  # Artefakt zostanie pobrany do folderu 'published'

      # Logowanie do Azure
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_1AD799D24EF14E78B832AF717FA0D0DE }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_907954AC37BA43E2897A4861F921832C }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_03C79C0B94DB460FBDCBE9C45CB4C349 }}

      # Wdrażamy aplikację na Azure Web App
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'newasptest'
          slot-name: 'Production'
          package: "D:/a/asptest/asptest/published"  # Używamy pobranego artefaktu do wdrożenia
